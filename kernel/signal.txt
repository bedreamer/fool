/**********************************************************************************************
 *	signal.h
 *	bedreamer@163.com
 *	Monday, May 28, 2012 12:46:22 CST
 *	linux信号处理机制的原理
 *	信号处理机制的原理：
 *		内核给一个进程发送软中断信号的方法，是在进程所在的进程表项的信号域设置对应于该信号的位。
 *	这里要补充的是，如果信号发送给一个正在睡眠的进程，那么要看该进程进入睡眠的优先级，如果进程
 *	睡眠在可被中断的优先级上，则唤醒进程；否则仅设置进程表中信号域相应的位，而不唤醒进程。这一
 *	点比较重要，因为进程检查是否收到信号的时机是：一个进程在即将从内核态返回到用户态时；或者，在
 *	一个进程要进入或离开一个适当的低调度优先级睡眠状态时。
 *		内核处理一个进程收到的信号的时机是在一个进程从内核态返回用户态时。所以，当一个进程在内核
 *	态下运行时，软中断信号并不立即起作用，要等到将返回用户态 时才处理。进程只有处理完信号才会返回用
 *	户态，进程在用户态下不会有未处理完的信号。
 *		内核处理一个进程收到的软中断信号是在该进程的上下文中，因此，进程必须处于运行状态。如果进程
 *	收到一个要捕捉的信号，那么进程从内核态返回用户态时执行用户定义的函数。而且执行用户定义的函数的方
 *	法很巧妙，内核是在用户栈上创建一个新的层，该层中将返回地址的值设置成用户定义的处理函数的地址，这样
 *	进程 从内核返回弹出栈顶时就返回到用户定义的函数处，从函数返回再弹出栈顶时，才返回原先进入内核的地
 *	方，接着原来的地方继续运行。这样做的原因是用户定义的 处理函数不能且不允许在内核态下执行（如果用户定
 *	义的函数在内核态下运行的话，用户就可以获得任何权限）。
 *		在信号的处理方法中有几点特别要引起注意。第一，在一些系统中，当一个进程处理完中断信号返回用
 *	户态之前，内核清除用户区中设定的对该信号的处理例程的地 址，即下一次进程对该信号的处理方法又改为默
 *	认值，除非在下一次信号到来之前再次使用signal系统调用。这可能会使得进程在调用signal之前又得 到该信
 *	号而导致退出。在BSD中，内核不再清除该地址。但不清除该地址可能使得进程因为过多过快的得到某个信号而
 *	导致堆栈溢出。为了避免出现上述情况。在 BSD系统中，内核模拟了对硬件中断的处理方法，即在处理某个中断
 *	时，阻止接收新的该类中断。
 *		第二个要引起注意的是，如果要捕捉的信号发生于进程正在一个系统调用中时，并且该进程睡眠在可中断的
 *	优先级上（若系统调用未睡眠而是在运行，根据上面的分 析，等该系统调用运行完毕后再处理信号），这时该信号
 *	引起进程作一次longjmp，跳出睡眠状态，返回用户态并执行信号处理例程。当从信号处理例程返回 时，进程就象
 *	从系统调用返回一样，但返回了一个错误如－1，并将errno设置为EINTR，指出该次系统调用曾经被中断。这要注
 *	意的是，BSD系统中内 核可以自动地重新开始系统调用，或者手如上面所述手动设置重启。
 *		第三个要注意的地方：若进程睡眠在可中断的优先级上，则当它收到一个要忽略的信号时，该进程被唤醒，但
 *	不做longjmp，一般是继续睡眠。但用户感觉不 到进程曾经被唤醒，而是象没有发生过该信号一样。所以能够使
 *	pause、sleep等函数从挂起态返回的信号必须要有信号处理函数，如果没有什么动作，可 以将处理函数设为空。
 *		第四个要注意的地方：内核对子进程终止（SIGCLD）信号的处理方法与其他信号有所区别。当进程正常或异
 *	常终止时，内核都向其父进程发一个SIGCLD 信号，缺省情况下，父进程忽略该信号，就象没有收到该信号似的，
 *	如果父进程希望获得子进程终止的状态，则应该事先用signal函数为SIGCLD信号设 置信号处理程序，在信号处理程序
 *	中调用wait。
 *		SIGCLD信号的作用是唤醒一个睡眠在可被中断优先级上的进程。如果该进程捕捉了这个信号，就象普通信号
 *	处理一样转到处理例程。如果进程忽略该信号，则 什么也不做。其实wait不一定放在信号处理函数中，但这样的话
 *	因为不知道子进程何时终止，在子进程终止前，wait将使父进程挂起休眠。
 *	http://www.cnblogs.com/Huayuan/archive/2012/05/01/2477686.html
 **********************************************************************************************/
